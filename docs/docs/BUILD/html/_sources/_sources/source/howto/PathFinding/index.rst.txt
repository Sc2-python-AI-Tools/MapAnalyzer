Pathfinding - Recipes
=====================


.. tip::
        Terminology:

            * ``cost`` : How much is it going to cost the pather to walk through this cell
            * ``weight_array`` : a finalized grid(with added cost) passed to plotting

        the optimal cost will be 1,

        and the worst cost would be np.inf( for non pathable cells)

        so you should keep that in mind if you want to create a complex influence map with different weights


Pathfinding - from our main to the enemy's main
-------------------------------------------------

* :meth:`.MapData.where_all`
* :meth:`.MapData.pathfind`

.. code-block::

        >>> enemy_main_region = map_data.where_all(map_data.bot.enemy_start_locations[0].position)[0]
        >>> start = my_region.center
        >>> goal = enemy_main_region.center
        >>> grid = map_data.get_pyastar_grid()
        >>> path = map_data.pathfind(start=start, goal=goal, grid=grid, allow_diagonal=True, sensitivity=3)
        >>> path
        [(157, 22), (154, 22), (151, 24), (148, 25), (145, 26), (142, 28), (139, 31), (136, 34), (133, 35), (130, 38), (127, 39), (124, 39), (121, 42), (118, 45), (115, 48), (112, 51), (109, 54), (106, 57), (103, 60), (100, 63), (97, 66), (94, 67), (93, 70), (90, 73), (90, 76), (93, 79), (93, 82), (91, 85), (91, 88), (88, 90), (85, 93), (82, 94), (79, 97), (76, 100), (73, 101), (70, 104), (67, 105), (64, 108), (61, 111), (58, 114), (55, 117), (52, 116), (49, 115), (46, 117), (43, 120)]


Plot and Debug the Pather - In Game
-----------------------------------

* Contributed by `rasper (github) <https://github.com/raspersc2>`_

.. code-block::

        def _draw_influence(self, grid: np.ndarray, threshold: int = 1) -> None:
            # self.ai  ->  bot_ai instance
            from math import floor

            def get_height(_x, _y) -> float:
                return (
                    -16
                    + 32 * self.ai.game_info.terrain_height[(floor(_x), floor(_y))] / 255
                )

            for x, y in zip(*np.where(grid > threshold)):
                pos: Point3 = Point3((x, y, get_height(x, y)))
                val: float = grid[x, y]
                color = (201, 168, 79)
            self.ai.client.debug_text_world(str(val), pos, color)

Plot and Debug the Pather
-------------------------

* :meth:`.MapData.where_all`
* :meth:`.MapData.plot_influenced_path`

.. code-block::

        >>> my_base_raw_location = map_data.bot.townhalls[0].position
        >>> my_region = map_data.where_all(my_base_raw_location)[0]
        >>> enemy_main_region = map_data.where_all(map_data.bot.enemy_start_locations[0].position)[0]
        >>> start = my_region.center
        >>> goal = enemy_main_region.center
        >>> grid = map_data.get_pyastar_grid()
        >>> path = map_data.plot_influenced_path(start=start, goal=goal, weight_array=grid, allow_diagonal=True, sensitivity=3)
        >>> map_data.show()


.. image:: pathing_simple.png
   :width: 75%


Plotting our custom Cost
-------------------------

* :meth:`.MapData.where_all`
* :meth:`.MapData.plot_influenced_path`
* :meth:`.MapData.add_cost`

**Let's add a cost with a big radius (25)  and the default weight of 100,  in a point we know is in our path**

.. code-block::

        >>> my_base_raw_location = map_data.bot.townhalls[0].position
        >>> my_region = map_data.where_all(my_base_raw_location)[0]
        >>> enemy_main_region = map_data.where_all(map_data.bot.enemy_start_locations[0].position)[0]
        >>> start = my_region.center
        >>> goal = enemy_main_region.center
        >>> grid = map_data.get_pyastar_grid()
        >>> p = (100,60) # the center point of which to add cost
        >>> grid = map_data.add_cost(position=p,radius=25, grid=grid )
        >>> path = map_data.plot_influenced_path(start=start, goal=goal, weight_array=grid, allow_diagonal=True)
        >>> map_data.show()


.. image:: path_with_cost.png
   :width: 75%


Influenced paths plots:
-----------------------

.. image:: https://user-images.githubusercontent.com/40754127/89323316-299bd500-d68e-11ea-8f98-24e7d9e78e1e.png
.. image:: https://user-images.githubusercontent.com/40754127/89323320-299bd500-d68e-11ea-8b89-d59d1387adca.png
.. image:: https://user-images.githubusercontent.com/40754127/89323322-2a346b80-d68e-11ea-8de6-996565e40c6b.png
.. image:: https://user-images.githubusercontent.com/40754127/89323304-24d72100-d68e-11ea-9ffc-8e835ea8c505.png
.. image:: https://user-images.githubusercontent.com/40754127/89323311-27d21180-d68e-11ea-97c4-99d6acd3cfa3.png
.. image:: https://user-images.githubusercontent.com/40754127/89323312-286aa800-d68e-11ea-854b-cfbb7beb261a.png
.. image:: https://user-images.githubusercontent.com/40754127/89323315-29033e80-d68e-11ea-97cb-17957ee9675c.png
