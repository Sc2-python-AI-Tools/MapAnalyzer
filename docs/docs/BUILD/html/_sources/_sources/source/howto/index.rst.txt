How To
======

Get our Starting :class:`.Region`
---------------------------------

* :meth:`.MapData.where`

.. code-block::

        >>> my_base_raw_location = self.bot.townhalls[0]
        >>> my_region = self.where(my_base_location)
        >>> my_region
        Region 1


Get Enemy Main and Natural :class:`.Region`
--------------------------------------------

* :meth:`.MapData.where_all`
* :meth:`.Region.connected_regions`

.. code-block::

        >>> # query in which region is the enemy main
        >>> position = self.bot.enemy_start_locations[0].position
        >>> all_polygon_areas_in_position = self.where_all(position)
        [Region 0]

        >>> enemy_main_base_region = all_polygon_areas_in_position[0]
        >>> enemy_main_base_region
        Region 0

        >>> # now it is very easy to know which region is the enemy's natural
        >>> enemy_natural_region = enemy_main_base_region.connected_regions[0] # connected_regions is a property of a Region
        >>> enemy_natural_region
        Region 3


:class:`.Region` connectivity
-------------------------------

* :meth:`.Region.connected_regions`

.. code-block::

        >>> # following previous example
        >>> my_region.connected_regions
        [Region 3]

Pathfind - from our main to the enemy's main
-------------------------------------------------

* :meth:`.MapData.where`
* :meth:`.MapData.pathfind`

.. code-block::

        >>> enemy_main_region = map_data.where(map_data.bot.enemy_start_locations[0].position)
        >>> start = my_region.center
        >>> goal = enemy_main_region.center
        >>> path = map_data.pathfind(start=start, goal=goal, grid=grid, allow_diagonal=True, sensitivity=3)
        >>> path
        [(157, 22), (154, 22), (151, 24), (148, 25), (145, 26), (142, 28), (139, 31), (136, 34), (133, 35), (130, 38), (127, 39), (124, 39), (121, 42), (118, 45), (115, 48), (112, 51), (109, 54), (106, 57), (103, 60), (100, 63), (97, 66), (94, 67), (93, 70), (90, 73), (90, 76), (93, 79), (93, 82), (91, 85), (91, 88), (88, 90), (85, 93), (82, 94), (79, 97), (76, 100), (73, 101), (70, 104), (67, 105), (64, 108), (61, 111), (58, 114), (55, 117), (52, 116), (49, 115), (46, 117), (43, 120)]

Find wall off building positions
--------------------------------

* :class:`.Polygon.BuildablePoints`
* :meth:`.Polygon.BuildablePoints.polygon`
* :meth:`.Polygon.BuildablePoints.points`
* :meth:`.Polygon.BuildablePoints.free_pct`
* :meth:`.Region.region_ramps`

.. code-block::

        >>> my_region
        Region 1
        >>> my_region.region_ramps # ramps also describe which regions border
        [<MDRamp[size=32]: [Region 3, Region 1]>]
        >>> my_region_ramp = my_region.region_ramps[0]
        >>> my_region_ramp
        <MDRamp[size=32]: [Region 3, Region 1]>
        >>> my_region_ramp.buildable_points # buildable_points is a class! not a list of points probably needs a rename
        <MapAnalyzer.Polygon.BuildablePoints object at 0x000001B5208DD2C8>
        >>> my_region_ramp.buildable_points.polygon # you can also see that these buildable points only belong to this specific Polygon, in our case MDRamp
        <MDRamp[size=32]: [Region 3, Region 1]>
        >>> my_region_ramp.buildable_points.free_pct # low buildable percent makes sense, most of the ramp's Polygon is not buildable
        0.21875
        >>> my_region_ramp.buildable_points.points # finally,  the buildable points,  which are the ramp wall off positions
        [(146, 26), (141, 30), (143, 23), (145, 24), (144, 23), (140, 29), (146, 25)]
